plugins {
    id 'java'
    id 'idea'
    id 'maven-publish'
    id 'fabric-loom'
}
base {
    archivesName = "${mod_id}-fabric-${minecraft_version}"
}
repositories {
    maven { url "https://www.cursemaven.com" }
    maven { url "https://api.modrinth.com/maven/" }
}
dependencies {
    minecraft "com.mojang:minecraft:${minecraft_version}"
    mappings loom.layered() {
        officialMojangMappings()
        parchment("org.parchmentmc.data:parchment-${minecraft_version}:${mapping_version}@zip")
    }
    modImplementation "net.fabricmc:fabric-loader:${fabric_loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${fabric_version}"
    implementation group: 'com.google.code.findbugs', name: 'jsr305', version: '3.0.1'
    // Mod Menu
    modImplementation  "maven.modrinth:modmenu:${modmenu_version}"
    // MrCrayfish Config Mods
    modCompileOnly "curse.maven:catalogue-fabric-667377:4766089" // Catalogue

    // Performance Monitoring
    modRuntimeOnly "curse.maven:spark-361579:4738953" // Spark
    // Render Mods To Test Shader Patcher
    modCompileOnly "curse.maven:irisshaders-455508:5485649" // Iris

    implementation project(":common")
}

loom {
    if (project(":common").file("src/main/resources/${mod_id}.accesswidener").exists()) {
        accessWidenerPath.set(project(":common").file("src/main/resources/${mod_id}.accesswidener"))
    }
    mixin {
        defaultRefmapName.set("${mod_id}.refmap.json")
    }
    runs {
        client {
            client()
            setConfigName("fabric client")
            ideConfigGenerated(true)
            runDir("run")
        }
        server {
            server()
            setConfigName("fabric server")
            ideConfigGenerated(true)
            runDir("run")
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    source(project(":common").sourceSets.main.allSource)
}

processResources {
    from project(":common").sourceSets.main.resources
}