plugins {
    id 'idea'
    id 'maven-publish'
    id 'net.minecraftforge.gradle'
    id 'org.spongepowered.mixin'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
    id 'com.gradleup.shadow' version '8.3.3'
}

base {
    archivesName = "${mod_id}-forge-${minecraft_version}"
}

mixin {
    add(sourceSets.main, "${mod_id}.refmap.json")

    config("${mod_id}.mixins.json")
    config("${mod_id}.forge.mixins.json")
}

minecraft {
    mappings channel: 'parchment', version: "${mapping_version}-${minecraft_version}"

    copyIdeResources = true //Calls processResources when in dev

    if (file('src/main/resources/META-INF/accesstransformer.cfg').exists()) {
        accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
    }

    runs {
        client {
            workingDirectory project.file('run')
            ideaModule "${rootProject.name}.${project.name}.main"
            taskName 'client'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            mods {
                modClientRun {
                    source sourceSets.main
                    source project(":common").sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            ideaModule "${rootProject.name}.${project.name}.main"
            taskName 'server'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            mods {
                modServerRun {
                    source sourceSets.main
                    source project(":common").sourceSets.main
                }
            }
        }
    }
}

configurations {
    shade
}

repositories {
    maven { url "https://www.cursemaven.com" }
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
    annotationProcessor("org.spongepowered:mixin:0.8.5-SNAPSHOT:processor")
    // MrCrayfish Config Mods
    implementation fg.deobf("curse.maven:catalogue-459701:4766090") // Catalogue
    compileOnly fg.deobf("curse.maven:configured-457570:5180900") // Configured
    // My Mods (PaCo Screen Tests)
    runtimeOnly fg.deobf("curse.maven:swampier-swamps-632591:4578599") // Swampier Swamps
    runtimeOnly fg.deobf("curse.maven:table-top-craft-467136:5318681") // Table Top Craft
    runtimeOnly fg.deobf("curse.maven:online-detector-454487:4574905") // Online Detector
    // Yung Mods (PaCo Screen Tests)
    runtimeOnly fg.deobf("curse.maven:yungs-api-421850:5331703") // YUNG's API
    runtimeOnly fg.deobf("curse.maven:yungs-better-witch-huts-631401:4769489") // YUNG's Better Witch Huts
    runtimeOnly fg.deobf("curse.maven:yungs-better-end-island-901344:5193815") // YUNG's Better End Island

    // exp4j (Expression Parsing)
    minecraftLibrary "net.objecthunter:exp4j:0.4.8"
    shade "net.objecthunter:exp4j:0.4.8"
    // NightConfig (Config System)
    // We shade because forges version is outdated...
    shade "com.electronwill.night-config:core:3.8.1"
    shade "com.electronwill.night-config:toml:3.8.1"

    // Performance Monitoring
    runtimeOnly fg.deobf("curse.maven:spark-361579:4738952") // Spark
    // Render Mods To Test Shader Patcher
    implementation fg.deobf("curse.maven:embeddium-908741:5456704") // Embeddium
    compileOnly fg.deobf("curse.maven:oculus-581495:5299671") // Oculus

    compileOnly project(":common")
}

tasks.withType(JavaCompile).configureEach {
    source(project(":common").sourceSets.main.allSource)
}

processResources {
    from project(":common").sourceSets.main.resources
}

shadowJar {
    archiveClassifier.set("")
    configurations = [project.configurations.shade]
    relocate 'net.objecthunter', "${project.group}.shadowed.objecthunter"
    relocate 'com.electronwill.nightconfig', "${project.group}.shadowed.electronwill.nightconfig"
    finalizedBy('reobfShadowJar')
    dependsOn "reobfJar"
}
// This block configures how the shadowJar will be reobfuscated.
reobf {
    shadowJar {} // Specifies that the reobfuscation will operate on the shadowJar.
}
// Makes sure that the assemble task depends on the shadowJar task.
// This means that the shadow JAR will be built before the final assembly of the project.
assemble.dependsOn shadowJar

jar.finalizedBy('reobfJar')